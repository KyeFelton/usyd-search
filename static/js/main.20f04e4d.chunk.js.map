{"version":3,"sources":["logo.png","components/Header.js","components/List.js","components/Panel.js","components/Stardog.js","App.js","index.js"],"names":["FILTERS","value","label","SEARCH_TYPES","Header","props","useState","filter","setFilter","query","setQuery","type","setType","className","src","logo","alt","options","menuPortalTarget","document","body","styles","menuPortal","base","zIndex","onChange","selectedOption","onSubmit","event","preventDefault","updateList","placeholder","aria-label","aria-describedby","target","List","formatter","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","results","length","map","result","index","id","href","rel","replace","format","Panel","handleEntityClick","uri","updatePanel","console","log","name","toString","summary","objs","entry","pred","onClick","includes","startsWith","subs","homepage","URL","AUTH","username","password","HEADERS","entitySearch","a","sparql","axios","get","params","auth","headers","then","response","res","readString","data","shift","pop","dict","Map","row","k","split","charAt","toUpperCase","slice","has","set","push","extractAttr","d","attr_names","Array","isArray","delete","entries","catch","err","alert","literalSearch","nameSearch","App","list","setList","panel","setPanel","entity","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.20f04e4d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.79db4e19.png\";","import React from 'react'\nimport { BsSearch } from 'react-icons/bs'\nimport logo from '../logo.png'\nimport Select from 'react-select'\nimport { useState } from \"react\"\n\n\nconst FILTERS = [\n    { value: 'none', label: '-- no filter --' },\n    { value: 'Centre', label: 'Centre' },\n    { value: 'Course', label: 'Course' },\n    { value: 'Department', label: 'Department' },\n    { value: 'Generic', label: 'Generic' },\n    { value: 'News', label: 'News' },\n    { value: 'Publication', label: 'Publication' },\n    { value: 'Research', label: 'Research' },\n    { value: 'Staff', label: 'Staff' },\n    { value: 'Unit', label: 'Unit' },\n]\n\nconst SEARCH_TYPES = [\n    { value: 'name', label: 'Name Search' },\n    { value: 'literal', label: 'Literal Search' },\n]\n\n\nexport default function Header(props) {\n\n    const [filter, setFilter] = useState('')\n    const [query, setQuery] = useState('')\n    const [type, setType] = useState('name')\n\n    function handleSubmit(event) {\n        event.preventDefault()\n        props.updateList(query, filter, type)\n    }\n\n    function handleFilterChange(selectedOption) {\n        if (selectedOption.value !== 'none') {\n            setFilter(`FILTER ( ?class IN ( ont:${selectedOption.value} ) )`)\n        }\n        else {\n            setFilter('')\n        }\n    }\n\n    function handleQueryChange(event) {\n        setQuery(event.target.value)\n    }\n\n    function handleTypeChange(selectedOption) {\n        setType( selectedOption.value )\n    }\n\n    return (\n        <header className=\"header container mb-3\">\n            <div className=\"row mb-4\">\n                <div className=\"col-sm-5 col-lg-4 col-xl-3\">\n                    <img src={logo} className=\"img-fluid\" alt=\"Univeristy of Sydney\"></img>\n                </div>\n                <div className=\"col-sm-3 col-lg-4 col-xl-5\">\n                </div>\n                <div className=\"col-sm-4 col-lg-4 col-xl-4\">\n                    <Select options={FILTERS} menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }} onChange={handleFilterChange} />\n                    <p></p>\n                    <Select options={SEARCH_TYPES} menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }} onChange={handleTypeChange} />\n                </div>\n            </div>\n            <form onSubmit={handleSubmit}>\n                <div className=\"input-group mb-3\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Search\" aria-label=\"Search\" aria-describedby=\"basic-addon1\" value={query} onChange={handleQueryChange} />\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                        <BsSearch />\n                    </button>\n                </div>\n            </form>\n        </header>\n    )\n}","import React from \"react\"\n\nexport default function List(props) {\n\n    const formatter = new Intl.NumberFormat('en-US', {\n        minimumFractionDigits: 2,      \n        maximumFractionDigits: 2,\n    })\n\n    if (props.results === null) {\n        return (\n            null\n        )\n    }\n    else if (props.results.length === 0) {\n        return (\n            <p className=\"m-3\">Searching...</p>\n        )\n    }\n    else if (props.results[0][0] === \"\") {\n        return (\n            <p className=\"m-3\">No results found.</p>\n        )\n    }\n    else {\n        return (\n            <ul className=\"list-group list-group-flush\">\n                {props.results.map((result, index) =>\n                    <li id={index} className=\"list-group-item list-group-item-action text-break\">\n                        <a href={result[6]} className=\"result-title\" target=\"_blank\" rel=\"noreferrer\">\n                            {result[2] === \"\" ? result[3] : result[2]}\n                        </a>\n                        <p className=\"result-score\">{result[4].replace(\"http://www.sydney.edu.au/ont/\", \"\")}</p>\n                        <p className=\"result-score\">Score: {formatter.format(result[1])}</p>\n                        <p className=\"result-desc\">{result[5]}</p>\n                        <a href={result[5]} className=\"result-link\" target=\"_blank\" rel=\"noreferrer\">{result[6]}</a>\n                    </li>\n                )}\n            </ul>\n        )\n    }\n}","import React from \"react\"\n\nexport default function Panel(props) {\n\n    function handleEntityClick(uri) {\n        props.updatePanel(uri)\n    }\n\n    if (props.results === null) {\n        return null\n    }\n    else {\n        console.log(props.results)\n        return (\n            <div className=\"panel\" id=\"panel\">\n                <h2 className=\"panel-title\">{props.results.name}</h2>\n                <p>{props.results.type.toString().replace(\"http://www.sydney.edu.au/ont/\", \"\")}</p>\n                <p className=\"panel-summary\">{props.results.summary}</p>\n                {props.results.objs.map(entry => {\n                    return (\n                        <div className=\"panel-attribute\">\n                            <b>{entry[0]}: </b>\n                            {entry[1].map(pred => {\n                                if (pred[1] !== \"\") {\n                                    return (<>\n                                        <a className=\"panel-object\" href=\"#panel\" onClick={() => handleEntityClick(pred[0])}>\n                                            {pred[1]}\n                                        </a><br /></>)\n                                }\n                                else if (pred[2] !== \"\") {\n                                    return (<>\n                                        <a className=\"panel-object\" href=\"#panel\" onClick={() => handleEntityClick(pred[0])}>\n                                            {pred[2]}\n                                        </a><br /></>)\n                                }\n                                else {\n                                    if (pred[0].includes(\"http://www.sydney.edu.au/kg\")) {\n                                        return null\n                                    }\n                                    else if (pred[0].startsWith(\"http:\")) {\n                                        return (<><a className=\"panel-object\" href={pred[0]} >{pred[0]}</a><br /></>)\n                                    }\n                                    else {\n                                        return (<span className=\"panel-literal\">{pred[0]}<br /></span>)\n                                    }\n                                }\n                            }\n                            )}\n                        </div>\n                    )\n                })}\n                {props.results.subs.map(entry => {\n                    return (\n                        <div className=\"panel-attribute\">\n                            <b>{entry[0]}: </b>\n                            {entry[1].map(pred => {\n                                if (pred[1] !== \"\") {\n                                    return (<>\n                                        <a className=\"panel-object\" href=\"#panel\" onClick={() => handleEntityClick(pred[0])}>\n                                            {pred[1]}\n                                        </a><br /></>)\n                                }\n                                else if (pred[2] !== \"\") {\n                                    return (<>\n                                        <a className=\"panel-object\" href=\"#panel\" onClick={() => handleEntityClick(pred[0])}>\n                                            {pred[2]}\n                                        </a><br /></>)\n                                }\n                                else {\n                                    if (pred[0].includes(\"http://www.sydney.edu.au/kg\")) {\n                                        return null\n                                    }\n                                    else if (pred[0].startsWith(\"http:\")) {\n                                        return (<><a className=\"panel-object\" href={pred[0]} >{pred[0]}</a><br /></>)\n                                    }\n                                    else {\n                                        return (<span className=\"panel-literal\">{pred[0]}<br /></span>)\n                                    }\n                                }\n                            }\n                            )}\n                        </div>\n                    )\n                })}\n                <div className=\"text-center m-4\">\n                    <a href={props.results.homepage} target=\"_blank\" rel=\"noreferrer\">\n                        <button className=\"btn btn-primary\">\n                            <b>Learn more</b>\n                        </button>\n                    </a>\n                </div>\n            </div>\n        )\n    }\n}","import axios from \"axios\"\nimport { readString } from \"react-papaparse\"\n\n\nconst URL = \"http://localhost:5820/usyd/query\"\nconst AUTH = { username: \"reader\", password: \"usyd\" }\nconst HEADERS = { \"Accept\": \"application/json-ld, text/csv\" }\n\n\nexport async function entitySearch(uri) {\n    let results = null\n    let sparql = `\n        prefix stardog: <tag:stardog:api:property:>\n        prefix ont: <http://www.sydney.edu.au/ont/>\n        prefix owl: <http://www.w3.org/2002/07/owl#>\n        prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n        \n        SELECT ?pX\n        ?o \n        (SAMPLE(?oname) AS ?oname)\n        (SAMPLE(?olabel) AS ?olabel) WHERE {\n            {\n                SELECT ?p ?o WHERE {\n                    <${uri}> ?p ?o .\n                }\n            }\n            OPTIONAL { ?o ont:name ?oname . }\n            OPTIONAL { ?o rdfs:label ?olabel . }\n            BIND(REPLACE(str(?p), \"http://www.sydney.edu.au/ont/\", \"\", \"i\") AS ?pX)\n        }\n        GROUP BY ?pX ?o\n        ORDER BY asc(?pX)\n    `\n    \n    results = await axios.get(URL, { params: { query: sparql }, auth: AUTH, headers: HEADERS })\n        .then(response => {\n            let res = readString(response.data).data\n            res.shift()\n            res.pop()\n\n            // Convert to map to group objects of the same predicate\n            let dict = new Map()\n            for (let row of res) {\n                let k = row.shift()\n                \n                // if (propertiesOfInterest.includes(k)) {\n                    \n                // Standardise property names\n                if (k.includes('http:')) {\n                    k = k.split('#')[1]\n                }\n                k = k.replace(/([A-Z])/g, \" $1\")\n                k = k.charAt(0).toUpperCase() + k.slice(1)\n\n                if (!dict.has(k)) {\n                    dict.set(k, [])\n                }\n                dict.get(k).push(row)\n            }\n\n            function extractAttr(d, ...attr_names) {\n                let res = null\n                for (let name of attr_names) {\n                    if (res === null && d.get(name)) {\n                        if (Array.isArray(d.get(name)[0])){\n                            res = d.get(name)[0][0]\n                        }\n                        else {\n                            res = d.get(name)[0]\n                        }\n                    }\n                    d.delete(name)\n                }\n                return res\n            }\n\n            return {\n                name: extractAttr(dict, 'Name', 'Label'),\n                type: extractAttr(dict, 'Type'),\n                homepage: extractAttr(dict, 'Homepage', 'Website'),\n                summary: extractAttr(dict, 'Summary', 'Description'),\n                objs: [...dict.entries()]\n            }\n        })\n        .catch(err => {\n            console.log(err)\n            alert(err)\n            return null\n        })\n\n    if (results.length !== null) {\n        sparql = `\n            prefix stardog: <tag:stardog:api:property:>\n            prefix ont: <http://www.sydney.edu.au/ont/>\n            prefix owl: <http://www.w3.org/2002/07/owl#>\n            prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n            \n            SELECT ?pX\n            ?s\n            (SAMPLE(?sname) AS ?sname)\n            (SAMPLE(?slabel) AS ?slabel) WHERE {\n                {\n                    SELECT ?s ?p WHERE {\n                        ?s ?p <${uri}> .\n                    }\n                }\n                OPTIONAL { ?s ont:name ?sname . }\n                OPTIONAL { ?s rdfs:label ?slabel . }\n                BIND(REPLACE(str(?p), \"http://www.sydney.edu.au/ont/\", \"\", \"i\") AS ?pX)\n            }\n            GROUP BY ?pX ?s\n            ORDER BY asc(?pX)\n        `\n        results['subs'] =  await axios.get(URL, { params: { query: sparql }, auth: AUTH, headers: HEADERS })\n            .then(response => {\n                let res = readString(response.data).data\n                res.shift()\n                res.pop()\n                let dict = new Map()\n                for (let row of res) {\n                    let k = row.shift()\n                            \n                    // Standardise property names\n                    k = k.replace(/([A-Z])/g, \" $1\")\n                    k = k.charAt(0).toUpperCase() + k.slice(1)\n\n                    if (!dict.has(k)) {\n                        dict.set(k, [])\n                    }\n                    dict.get(k).push(row)\n                }\n                return [...dict.entries()]\n            }\n        )\n    }\n    console.log(results)\n    return results\n}\n\n\nexport async function literalSearch(query, filter) {\n    let results = []\n    let sparql = `\n        prefix fts: <tag:stardog:api:search:>\n        prefix ont: <http://www.sydney.edu.au/ont/>\n        prefix owl: <http://www.w3.org/2002/07/owl#>\n                \n        SELECT ?s (MAX(?score) AS ?score) \n            (SAMPLE(?name) AS ?name) \n            (SAMPLE(?label) AS ?label) \n            (SAMPLE(?class) AS ?class)\n            (SAMPLE(?summ) AS ?summ)\n            (SAMPLE(?homepage) AS ?homepage) \n            (MAX(?match) AS ?match) WHERE {\n            { \n                SELECT ?score ?result WHERE {\n                    SERVICE fts:textMatch {\n                        [] fts:query \"${query}\";\n                            fts:score ?score ;\n                            fts:result ?result ;\n                            fts:threshold 0.5;\n                    } \n                }\n            }\n            ?s ?p ?result ; \n                ont:name ?name ; \n                rdfs:label ?label ;\n                ont:homepage ?homepage ;\n                a ?class .\n            BIND ( IF ( LCASE(?label) = LCASE(\"${query}\"), 1, 0 ) AS ?match ) .\n            OPTIONAL { ?s ont:summary ?summ . }\n            FILTER ( ?class NOT IN ( owl:Thing ) )\n            ${filter}\n        } \n        GROUP BY ?s \n        ORDER BY DESC(?match) DESC(?score)\n        LIMIT 100\n    `\n    console.log(sparql)\n    results = axios.get(URL, { params: { query: sparql }, auth: AUTH, headers: HEADERS })\n        .then(response => {\n            let res = readString(response.data).data\n            res.shift()\n            res.pop()\n            return res\n        })\n        .catch(err => {\n            console.log(err)\n            alert(err)\n            return [[\"\"]]\n        })\n    \n    return results\n}\n\n\nexport async function nameSearch(query, filter) {\n    let results = []\n    let sparql = `\n        prefix stardog: <tag:stardog:api:property:>\n        prefix ont: <http://www.sydney.edu.au/ont/>\n        prefix owl: <http://www.w3.org/2002/07/owl#>\n        \n        SELECT ?s (MAX(?score) AS ?score) \n            (SAMPLE(?name) AS ?name)\n            (SAMPLE(?label) AS ?label) \n            (SAMPLE(?class) AS ?class)\n            (SAMPLE(?summ) AS ?summ)\n            (SAMPLE(?homepage) AS ?homepage)\n            (MAX(?match) AS ?match) WHERE {\n\n            ?s rdfs:label ?label .\n            (?label ?score) stardog:textMatch \"${query}\" .\n            BIND ( IF ( LCASE(?label) = LCASE(\"${query}\"), 1, 0 ) AS ?match ) .\n\n            ?s ?p ?result ; \n                ont:name ?name ; \n                ont:homepage ?homepage ;\n                a ?class .\n            OPTIONAL { ?s ont:summary ?summ . }\n            FILTER ( ?class NOT IN ( owl:Thing ) )\n            ${filter}\n        }\n        GROUP BY ?s \n        ORDER BY DESC(?match) desc(?score) asc(strlen(str(?name)))\n        LIMIT 100\n    `\n    results = axios.get(URL, { params: { query: sparql }, auth: AUTH, headers: HEADERS })\n        .then(response => {\n            let res = readString(response.data).data\n            res.shift()\n            res.pop()\n            return res\n        })\n        .catch(err => {\n            console.log(err)\n            alert(err)\n            return [[\"\"]]\n        })\n    return results\n}\n","import Header from \"./components/Header\"\nimport List from \"./components/List\"\nimport Panel from \"./components/Panel\"\nimport { entitySearch, literalSearch, nameSearch } from './components/Stardog'\nimport { useState } from \"react\"\nimport \"./App.css\"\n\n\nexport default function App() {\n\n    const [list, setList] = useState(null)\n    const [panel, setPanel] = useState(null)\n\n    async function updateList(query, filter, type) {\n        setList([])\n        setPanel(null)\n        let results = []\n        switch (type) {\n            case 'name':\n                results = await nameSearch(query, filter)\n                break\n            case 'literal':\n                results = await literalSearch(query, filter)\n                break\n            default:\n                results = await nameSearch(query, filter)\n                break\n        }\n        setList(results)\n        if (results[0][0] !== \"\") {\n            let entity = []\n            entity = await entitySearch(results[0][0])\n            setPanel(entity)\n        }\n    }\n\n    async function updatePanel(uri) {\n        setPanel(null)\n        let entity = []\n        entity = await entitySearch(uri)\n        setPanel(entity)\n    }\n\n\n\n    return (\n        <div className=\"app\" >\n            <div className=\"main\" >\n                <Header updateList={updateList}/>\n                <div className=\"container\" >\n                    <div className=\"row\" >\n                        <div className=\"col-8\" >\n                            <List results={list}/>\n                        </div>\n                        <div className=\"col-4\" >\n                            <Panel results={panel} updatePanel={updatePanel}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"error\" >\n                Please view on a larger screen.\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}