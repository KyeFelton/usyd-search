{"version":3,"sources":["logo.png","components/Header.js","components/List.js","components/Panel.js","components/Stardog.js","App.js","index.js"],"names":["FILTERS","value","label","SEARCH_TYPES","Header","props","useState","filter","setFilter","query","setQuery","type","setType","className","id","src","logo","alt","options","menuPortalTarget","document","body","styles","menuPortal","base","zIndex","onChange","selectedOption","onSubmit","event","preventDefault","updateList","placeholder","aria-label","aria-describedby","target","List","results","length","map","result","index","href","onClick","uri","updatePanel","replace","rel","Panel","handleEntityClick","homepage","name","toString","summary","attr","entry","values","i","suffix","includes","startsWith","URL","AUTH","username","password","HEADERS","entitySearch","extractAttr","a","sparql","objs","axios","get","params","auth","headers","then","response","res","readString","data","shift","pop","dict","Map","row","k","split","charAt","toUpperCase","slice","has","set","push","catch","err","console","log","d","attr_names","Array","isArray","delete","subs","entries","literalSearch","nameSearch","App","list","setList","panel","setPanel","entity","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fa03f787.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.e0034f6d.png\";","import React from 'react'\nimport { BsSearch } from 'react-icons/bs'\nimport logo from '../logo.png'\nimport Select from 'react-select'\nimport { useState } from \"react\"\n\n\nconst FILTERS = [\n    { value: 'none', label: '-- no filter --' },\n    { value: 'Centre', label: 'Centre' },\n    { value: 'Course', label: 'Course' },\n    { value: 'Department', label: 'Department' },\n    { value: 'Generic', label: 'Generic' },\n    { value: 'News', label: 'News' },\n    { value: 'Publication', label: 'Publication' },\n    { value: 'Research', label: 'Research' },\n    { value: 'Staff', label: 'Staff' },\n    { value: 'Unit', label: 'Unit' },\n]\n\nconst SEARCH_TYPES = [\n    { value: 'name', label: 'Name Search' },\n    { value: 'literal', label: 'Literal Search' },\n]\n\n\nexport default function Header(props) {\n\n    const [filter, setFilter] = useState('')\n    const [query, setQuery] = useState('')\n    const [type, setType] = useState('name')\n\n    function handleSubmit(event) {\n        event.preventDefault()\n        props.updateList(query, filter, type)\n    }\n\n    function handleFilterChange(selectedOption) {\n        if (selectedOption.value !== 'none') {\n            setFilter(`FILTER ( ?class IN ( ont:${selectedOption.value} ) )`)\n        }\n        else {\n            setFilter('')\n        }\n    }\n\n    function handleQueryChange(event) {\n        setQuery(event.target.value)\n    }\n\n    function handleTypeChange(selectedOption) {\n        setType(selectedOption.value)\n    }\n\n    return (\n        <header className=\"header container mb-3\" id=\"header\">\n            <div className=\"row mb-4\">\n                <div className=\"col-sm-5 col-lg-4 col-xl-3\">\n                    <img src={logo} className=\"img-fluid\" alt=\"Univeristy of Sydney\"></img>\n                </div>\n                <div className=\"col-sm-3 col-lg-4 col-xl-5\">\n                </div>\n                <div className=\"col-sm-4 col-lg-4 col-xl-4\">\n                    <Select options={FILTERS} menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }} onChange={handleFilterChange} />\n                    <p></p>\n                    <Select options={SEARCH_TYPES} menuPortalTarget={document.body} styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }} onChange={handleTypeChange} />\n                </div>\n            </div>\n            <form onSubmit={handleSubmit}>\n                <div className=\"input-group mb-3\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Search\" aria-label=\"Search\" aria-describedby=\"basic-addon1\" value={query} onChange={handleQueryChange} />\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                        <BsSearch />\n                    </button>\n                </div>\n            </form>\n        </header>\n    )\n}","import React from \"react\"\n\nexport default function List(props) {\n\n    function handleEntityClick(uri) {\n        props.updatePanel(uri)\n    }\n\n    if (props.results === null) {\n        return (\n            null\n        )\n    }\n    else if (props.results.length === 0) {\n        return (\n            <p className=\"m-3\">Searching...</p>\n        )\n    }\n    else if (props.results[0][0] === \"\") {\n        return (\n            <p className=\"m-3\">No results found.</p>\n        )\n    }\n    else {\n        return (\n            <ul className=\"list-group list-group-flush\">\n                {props.results.map((result, index) =>\n                    <li id={index} className=\"list-group-item list-group-item-action text-break\">\n                        <a className=\"result-title\" href=\"#header\" onClick={() => handleEntityClick(result[0])}>\n                            {result[2] === \"\" ? result[3] : result[2]}\n                        </a>\n                        <p className=\"result-class\">{result[4].replace(\"http://www.sydney.edu.au/ont/\", \"\")}</p>\n                        <p className=\"result-summary\">{result[5]}</p>\n                        <a href={result[5]} className=\"result-link\" target=\"_blank\" rel=\"noreferrer\">{result[6]}</a>\n                    </li>\n                )}\n            </ul>\n        )\n    }\n}","import React from \"react\"\n\nexport default function Panel(props) {\n\n    function handleEntityClick(uri) {\n        props.updatePanel(uri)\n    }\n\n    if (props.results === null) {\n        return null\n    }\n    else {\n        return (\n            <div className=\"panel\" id=\"panel\">\n                <h2 className=\"panel-title\">\n                    <a href={props.results.homepage} target=\"_blank\" rel=\"noreferrer\">{props.results.name}</a>\n                </h2>\n                <p className=\"panel-class\">{props.results.type.toString().replace(\"http://www.sydney.edu.au/ont/\", \"\")}</p>\n                <p className=\"panel-summary\">{props.results.summary}</p>\n                {props.results.attr.map(entry => {\n                    if (entry[0] !== \"\") {\n                        return (\n                            <div className=\"panel-attribute\">\n                                <b>{entry[0]}: </b>\n                                {entry[1].map((values, i, {length}) => {\n                                    let suffix = \"\"\n                                    if (i < length - 1) {\n                                        suffix = \",\"\n                                    }\n                                    if (values[1] !== \"\") {\n                                        return (<>\n                                            <a className=\"panel-object\" href=\"#header\" onClick={() => handleEntityClick(values[0])}>\n                                                {values[1]}\n                                            </a>{suffix}&nbsp;</>)\n                                    }\n                                    else if (values[2] !== \"\") {\n                                        return (<>\n                                            <a className=\"panel-object\" href=\"#header\" onClick={() => handleEntityClick(values[0])}>\n                                                {values[2]}\n                                            </a>{suffix}&nbsp;</>)\n                                    }\n                                    else {\n                                        if (values[0].includes(\"http://www.sydney.edu.au/kg\")) {\n                                            return null\n                                        }\n                                        else if (values[0].startsWith(\"http:\")) {\n                                            return (<><a className=\"panel-object\" href={values[0]} >{values[0]}</a>{suffix}&nbsp;</>)\n                                        }\n                                        else {\n                                            return (<span className=\"panel-literal\">{values[0]}{suffix}&nbsp;</span>)\n                                        }\n                                    }\n                                })}\n                            </div>\n                        )\n                    }\n                    else {\n                        return null\n                    }\n                })}\n            </div>\n        )\n    }\n}","import axios from \"axios\"\nimport { readString } from \"react-papaparse\"\n\n\nconst URL = \"https://34.116.92.233:5821/usyd/query\"\nconst AUTH = { username: \"reader\", password: \"usyd\" } // read-only user\nconst HEADERS = { \n    \"Accept\": \"application/json-ld, text/csv\",\n    \"Access-Control-Allow-Headers\": \"accept, Authorization,  origin, sd-connection-string\",\n    \"Access-Control-Allow-Methods\": \"OPTIONS, GET\",\n    \"Access-Control-Allow-Origin\": \"*\"\n }\n\n// retrieves all the properties for the specified entity\nexport async function entitySearch(uri) {\n    let sparql = `\n        prefix stardog: <tag:stardog:api:property:>\n        prefix ont: <http://www.sydney.edu.au/ont/>\n        prefix owl: <http://www.w3.org/2002/07/owl#>\n        prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n        \n        SELECT ?pX\n        ?o \n        (SAMPLE(?oname) AS ?oname)\n        (SAMPLE(?olabel) AS ?olabel) WHERE {\n            {\n                SELECT ?p ?o WHERE {\n                    <${uri}> ?p ?o .\n                }\n            }\n            OPTIONAL { ?o ont:name ?oname . }\n            OPTIONAL { ?o rdfs:label ?olabel . }\n            BIND(REPLACE(str(?p), \"http://www.sydney.edu.au/ont/\", \"\", \"i\") AS ?pX)\n        }\n        GROUP BY ?pX ?o\n        ORDER BY asc(?pX)\n    `\n    let objs = null\n    objs = await axios.get(URL, { params: { query: sparql }, auth: AUTH, headers: HEADERS })\n        .then(response => {\n            let res = readString(response.data).data\n            res.shift()\n            res.pop()\n\n            // Convert to map to group objects of the same predicate\n            let dict = new Map()\n            for (let row of res) {\n                let k = row.shift()\n                                    \n                // Standardise property names\n                if (k.includes('http:')) {\n                    k = k.split('#')[1]\n                }\n                k = k.replace(/([A-Z])/g, \" $1\")\n                k = k.charAt(0).toUpperCase() + k.slice(1)\n\n                if (!dict.has(k)) {\n                    dict.set(k, [])\n                }\n                dict.get(k).push(row)\n            }\n            return dict\n        })\n        .catch(err => {\n            console.log(err)\n            return null\n        })\n\n    if (objs === null) {\n        return null\n    }\n    else {\n        sparql = `\n            prefix stardog: <tag:stardog:api:property:>\n            prefix ont: <http://www.sydney.edu.au/ont/>\n            prefix owl: <http://www.w3.org/2002/07/owl#>\n            prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n            \n            SELECT ?sclassX\n            ?s\n            (SAMPLE(?sname) AS ?sname)\n            (SAMPLE(?slabel) AS ?slabel) WHERE {\n                {\n                    SELECT ?s ?p WHERE {\n                        ?s ?p <${uri}> .\n                    }\n                }\n                ?s a ?sclass .\n                OPTIONAL { ?s ont:name ?sname . }\n                OPTIONAL { ?s rdfs:label ?slabel . }\n                BIND(REPLACE(str(?sclass), \"http://www.sydney.edu.au/ont/\", \"\", \"i\") AS ?sclassX)\n            }\n            GROUP BY ?sclassX ?s\n            ORDER BY asc(?sclassX)\n        `\n        let subs = null\n        subs =  await axios.get(URL, { params: { query: sparql }, auth: AUTH, headers: HEADERS })\n            .then(response => {\n                let res = readString(response.data).data\n                res.shift()\n                res.pop()\n                let dict = new Map()\n                for (let row of res) {\n                    let k = row.shift()\n                            \n                    // Standardise property names\n                    k = k.replace(/([A-Z])/g, \" $1\")\n                    k = k.charAt(0).toUpperCase() + k.slice(1)\n\n                    if (!dict.has(k)) {\n                        dict.set(k, [])\n                    }\n                    dict.get(k).push(row)\n                }\n                return dict\n            }\n        )\n        let results\n        if (subs !== null) {\n            results = new Map([...objs, ...subs])\n        }\n        else {\n            results = objs\n        }\n        function extractAttr(d, ...attr_names) {\n            let res = null\n            for (let name of attr_names) {\n                if (res === null && d.get(name)) {\n                    if (Array.isArray(d.get(name)[0])){\n                        res = d.get(name)[0][0]\n                    }\n                    else {\n                        res = d.get(name)[0]\n                    }\n                }\n                d.delete(name)\n            }\n            return res\n        }\n        return {\n            name: extractAttr(results, 'Name', 'Label'),\n            type: extractAttr(results, 'Type'),\n            homepage: extractAttr(results, 'Homepage', 'Website'),\n            summary: extractAttr(results, 'Summary', 'Description', 'Bio', 'Blurb', 'Media'),\n            attr: [...results.entries()]\n        }\n    }\n}\n\n// retrieves entities that wtih any literal property that match the users input\nexport async function literalSearch(query, filter) {\n    let results = []\n    let sparql = `\n        prefix fts: <tag:stardog:api:search:>\n        prefix ont: <http://www.sydney.edu.au/ont/>\n        prefix owl: <http://www.w3.org/2002/07/owl#>\n        prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>  \n                \n        SELECT ?s (MAX(?score) AS ?score) \n            (SAMPLE(?name) AS ?name) \n            (SAMPLE(?label) AS ?label) \n            (SAMPLE(?class) AS ?class)\n            (SAMPLE(?summ) AS ?summ)\n            (SAMPLE(?homepage) AS ?homepage) \n            (MAX(?match) AS ?match) WHERE {\n            { \n                SELECT ?score ?result WHERE {\n                    SERVICE fts:textMatch {\n                        [] fts:query \"${query}\";\n                            fts:score ?score ;\n                            fts:result ?result ;\n                            fts:threshold 0.5;\n                    } \n                }\n            }\n            ?s ?p ?result ; \n                ont:name ?name ; \n                rdfs:label ?label ;\n                ont:homepage ?homepage ;\n                a ?class .\n            BIND ( IF ( LCASE(?label) = LCASE(\"${query}\"), 1, 0 ) AS ?match ) .\n            OPTIONAL { ?s ont:summary ?summ . }\n            FILTER ( ?class NOT IN ( owl:Thing ) )\n            ${filter}\n        } \n        GROUP BY ?s \n        ORDER BY DESC(?match) DESC(?score)\n        LIMIT 100\n    `\n    results = axios.get(URL, { params: { query: sparql }, auth: AUTH, headers: HEADERS })\n        .then(response => {\n            let res = readString(response.data).data\n            res.shift()\n            res.pop()\n            return res\n        })\n        .catch(err => {\n            console.log(err)\n            return [[\"\"]]\n        })\n    \n    return results\n}\n\n// retrieves entities that wtih rdfs labels that match the users input\nexport async function nameSearch(query, filter) {\n    let results = []\n    let sparql = `\n        prefix stardog: <tag:stardog:api:property:>\n        prefix ont: <http://www.sydney.edu.au/ont/>\n        prefix owl: <http://www.w3.org/2002/07/owl#>\n        prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>  \n        \n        SELECT ?s (MAX(?score) AS ?score) \n            (SAMPLE(?name) AS ?name)\n            (SAMPLE(?label) AS ?label) \n            (SAMPLE(?class) AS ?class)\n            (SAMPLE(?summ) AS ?summ)\n            (SAMPLE(?homepage) AS ?homepage)\n            (MAX(?match) AS ?match) WHERE {\n\n            ?s rdfs:label ?label .\n            (?label ?score) stardog:textMatch \"${query}\" .\n            BIND ( IF ( LCASE(?label) = LCASE(\"${query}\"), 1, 0 ) AS ?match ) .\n\n            ?s ?p ?result ; \n                ont:name ?name ; \n                ont:homepage ?homepage ;\n                a ?class .\n            OPTIONAL { ?s ont:summary ?summ . }\n            FILTER ( ?class NOT IN ( owl:Thing ) )\n            ${filter}\n        }\n        GROUP BY ?s \n        ORDER BY DESC(?match) desc(?score) asc(strlen(str(?name)))\n        LIMIT 100\n    `\n    results = axios.get(URL, { params: { query: sparql }, auth: AUTH, headers: HEADERS })\n        .then(response => {\n            let res = readString(response.data).data\n            res.shift()\n            res.pop()\n            return res\n        })\n        .catch(err => {\n            console.log(err)\n            return [[\"\"]]\n        })\n    return results\n}\n","import Header from \"./components/Header\"\nimport List from \"./components/List\"\nimport Panel from \"./components/Panel\"\nimport { entitySearch, literalSearch, nameSearch } from './components/Stardog'\nimport { useState } from \"react\"\nimport \"./App.css\"\n\n\nexport default function App() {\n\n    const [list, setList] = useState(null)\n    const [panel, setPanel] = useState(null)\n\n    async function updateList(query, filter, type) {\n        setList([])\n        setPanel(null)\n        let results = []\n        switch (type) {\n            case 'name':\n                results = await nameSearch(query, filter)\n                break\n            case 'literal':\n                results = await literalSearch(query, filter)\n                break\n            default:\n                results = await nameSearch(query, filter)\n                break\n        }\n        setList(results)\n        if (results[0][0] !== \"\") {\n            let entity = []\n            entity = await entitySearch(results[0][0])\n            setPanel(entity)\n        }\n    }\n\n    async function updatePanel(uri) {\n        setPanel(null)\n        let entity = []\n        entity = await entitySearch(uri)\n        setPanel(entity)\n    }\n\n\n\n    return (\n        <div className=\"app\" >\n            <div className=\"main\" >\n                <Header updateList={updateList}/>\n                <div className=\"container\" >\n                    <div className=\"row\" >\n                        <div className=\"col-8\" >\n                            <List results={list} updatePanel={updatePanel}/>\n                        </div>\n                        <div className=\"col-4\" >\n                            <Panel results={panel} updatePanel={updatePanel}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"error\" >\n                Please view on a larger screen.\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}